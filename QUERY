-- E-commerce Database Schema Design
-- This script creates a database and a set of tables with relationships
-- based on the E-commerce domain, as per the internship task.

-- 1. Create the Database
-- This command will create a new database named 'ecommerce_db'
-- if it does not already exist.
CREATE DATABASE IF NOT EXISTS ecommerce_db;

-- 2. Use the created database for all subsequent commands
USE ecommerce_db;

-- 3. Create the 'Customers' table
-- This table stores information about each customer.
-- 'CustomerID' is the primary key and is set to auto-increment.
-- 'Email' is set to be unique to prevent duplicate accounts.
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Phone VARCHAR(20),
    Address VARCHAR(255)
);

-- 4. Create the 'Products' table
-- This table stores details of all available products.
-- 'ProductID' is the primary key and is set to auto-increment.
-- 'Price' is a DECIMAL type to handle currency with two decimal places.
CREATE TABLE Products (
    ProductID INT PRIMARY KEY AUTO_INCREMENT,
    ProductName VARCHAR(100) NOT NULL,
    Description TEXT,
    Price DECIMAL(10, 2) NOT NULL,
    StockQuantity INT NOT NULL DEFAULT 0
);

-- 5. Create the 'Orders' table
-- This table records customer orders.
-- 'OrderID' is the primary key and is set to auto-increment.
-- 'CustomerID' is a foreign key, creating a one-to-many relationship
-- with the 'Customers' table. ON DELETE CASCADE ensures that if a customer
-- is deleted, their orders are also deleted.
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerID INT NOT NULL,
    OrderDate DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    TotalAmount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ON DELETE CASCADE
);

-- 6. Create the 'Order_Items' table
-- This table acts as a bridge for the many-to-many relationship
-- between 'Orders' and 'Products'.
-- 'OrderItemID' is the primary key.
-- 'OrderID' is a foreign key referencing the 'Orders' table.
-- 'ProductID' is a foreign key referencing the 'Products' table.
-- A UNIQUE constraint is added on (OrderID, ProductID) to prevent
-- the same product from being added multiple times to the same order.
CREATE TABLE Order_Items (
    OrderItemID INT PRIMARY KEY AUTO_INCREMENT,
    OrderID INT NOT NULL,
    ProductID INT NOT NULL,
    Quantity INT NOT NULL,
    PricePerItem DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID) ON DELETE CASCADE,
    UNIQUE (OrderID, ProductID)
);

-- Optional: Insert some sample data to test the schema
INSERT INTO Customers (FirstName, LastName, Email, Phone, Address) VALUES
('John', 'Doe', 'john.doe@example.com', '555-1234', '123 Main St, Anytown'),
('Jane', 'Smith', 'jane.smith@example.com', '555-5678', '456 Oak Ave, Somewhere');

INSERT INTO Products (ProductName, Description, Price, StockQuantity) VALUES
('Laptop', 'A powerful 15-inch laptop', 1200.00, 50),
('Wireless Mouse', 'Ergonomic wireless mouse', 25.50, 200),
('Keyboard', 'Mechanical keyboard with RGB', 75.00, 150);

INSERT INTO Orders (CustomerID, TotalAmount) VALUES
(1, 1225.50),
(2, 75.00);

INSERT INTO Order_Items (OrderID, ProductID, Quantity, PricePerItem) VALUES
(1, 1, 1, 1200.00),
(1, 2, 1, 25.50),
(2, 3, 1, 75.00);

